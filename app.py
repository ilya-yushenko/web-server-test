import os
from flask import Flask, render_template, request, jsonify
from datetime import datetime
import json
import requests

app = Flask(__name__)

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')


def send_to_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }
    response = requests.post(url, json=payload)
    return response.ok


def prepare_order_message(order):
    message = (
        f"üì¶ *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!*\n"
        f"üë§ *–Ü–º'—è:* {order['customerName']}\n"
        f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {order['customerPhone']}\n"
        f"üè† *–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {order['customerAddress']}\n"
        f"üçØ *–¢–æ–≤–∞—Ä:* {order['product']}\n"
        f"‚öñÔ∏è *–û–±'—î–º:* {order['quantity']}\n"
        f"üí¨ *–ö–æ–º–µ–Ω—Ç–∞—Ä:* {order['comment'] if order['comment'] else '–ù–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}\n"
        f"üïí *–ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:* {order['timestamp']}"
    )
    return message


def prepare_customer_message(customer):
    message = (
        f"‚úâÔ∏è *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!*\n"
        f"üë§ *–Ü–º'—è:* {customer['customerName']}\n"
        f"üìß *Email:* {customer['customerEmail']}\n"
        f"üí¨ *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:* {customer['customerMessage']}\n"
        f"üïí *–ß–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:* {customer['timestamp']}"
    )
    return message


@app.route('/')
def home():
    return render_template('index.html')


@app.route('/api/products', methods=['GET'])
def get_products():
    try:
        json_path = os.path.join(os.getcwd(), 'products.json')
        with open(json_path, 'r', encoding='utf-8') as file:
            products = json.load(file)
        return jsonify(products), 200
    except FileNotFoundError:
        return jsonify({"error": "–§–∞–π–ª products.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"}), 500
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/order', methods=['POST'])
def order():
    try:
        data = request.get_json()
        product = data.get('orderProduct')
        quantity = data.get('orderQuantity')
        customer_name = data.get('orderCustomerName')
        customer_phone = data.get('orderCustomerPhone')
        customer_address = data.get('orderCustomerAddress')
        comment = data.get('orderCustomerComment', '')

        if not all([product, quantity, customer_name, customer_phone, customer_address]):
            return jsonify({'message': '‚ùå –í—Å—ñ –ø–æ–ª—è (—Ç–æ–≤–∞—Ä, –æ–±\'—î–º, —ñ–º\'—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å–∞) –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è.'}), 400

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
        print(f"[{timestamp}] –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {customer_name} | {product} | {quantity} –∫–≥ | {customer_phone} | {customer_address} | {comment}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        order_data = {
            'customerName': customer_name,
            'customerEmail': data.get('customerEmail', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
            'product': product,
            'quantity': quantity,
            'customerPhone': customer_phone,
            'customerAddress': customer_address,
            'comment': comment,
            'timestamp': timestamp
        }

        prepared_order_message = prepare_order_message(order_data)
        if send_to_telegram(prepared_order_message):
            return jsonify({
                'message': f'‚úÖ –î—è–∫—É—î–º–æ, {customer_name}! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ {product} {quantity} –ø—Ä–∏–π–Ω—è—Ç–µ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.'
            })
        else:
            return jsonify({'message': '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'}), 500

    except Exception as e:
        print(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        return jsonify({'message': '‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'}), 500


@app.route('/contactUs', methods=['POST'])
def contact_us():
    try:
        data = request.get_json()
        customer_name = data.get('customerName')
        customer_email = data.get('customerEmail')
        customer_message = data.get('customerMessage')

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
        print(f"[{timestamp}] –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {customer_name} ({customer_email}) –Ω–∞–ø–∏—Å–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {customer_message}")

        customer_data = {
            'customerName': customer_name,
            'customerEmail': customer_email,
            'customerMessage': customer_message,
            'timestamp': timestamp
        }

        prepared_message = prepare_customer_message(customer_data)
        if send_to_telegram(prepared_message):
            return jsonify({'message': f'‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, {customer_name}! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'})
        else:
            return jsonify({'message': '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. C–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'}), 500
    except Exception as e:
        print(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    return jsonify({'message': '‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'}), 500


# if __name__ == '__main__':
#     app.run(debug=True)


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)